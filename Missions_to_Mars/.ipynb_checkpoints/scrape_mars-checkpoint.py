{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from bs4 import BeautifulSoup as bs\n",
    "import re\n",
    "import pandas as pd\n",
    "from splinter import Browser\n",
    "from splinter.exceptions import ElementDoesNotExist\n",
    "import time\n",
    "\n",
    "# initialize a browser\n",
    "def init_browser():\n",
    "    \"\"\"open a chrome browser\n",
    "    \"\"\"\n",
    "    executable_path = {'executable_path': '/usr/local/bin/chromedriver'}\n",
    "\n",
    "    return Browser('chrome', **executable_path, headless=True)\n",
    "\n",
    "# scrape data\n",
    "def scrape():\n",
    "    \"\"\"scrape data from website and save into a dict\n",
    "    \"\"\"\n",
    "    # define websites we want to scrape\n",
    "    news_url = \"https://mars.nasa.gov/news/\"\n",
    "    image_url = \"https://www.jpl.nasa.gov/spaceimages/?search=&category=Mars\"\n",
    "    weather_url = \"https://twitter.com/marswxreport?lang=en\"\n",
    "    fact_url = \"https://space-facts.com/mars/\"\n",
    "    hemisphere_urls = \"https://astrogeology.usgs.gov/search/results?q=hemisphere+enhanced&k1=target&v1=Mars\"\n",
    "\n",
    "    #=================================== scrape latest news =================================\n",
    "    # open default browser\n",
    "    browser = init_browser()\n",
    "    browser.visit(news_url)\n",
    "    time.sleep(1.5)\n",
    "    # create soup object\n",
    "    html = browser.html\n",
    "    soup = bs(html, \"html5lib\")\n",
    "    \n",
    "    # -------------------------\n",
    "    news_title = soup.find(\"ul\",\"item_list\").find_all(\"div\",\"content_title\")[0].text\n",
    "    news_p = soup.find(\"ul\",\"item_list\").find_all(\"div\",\"article_teaser_body\")[0].text\n",
    "\n",
    "    #================================== scrape images =======================================\n",
    "    browser.visit(image_url)\n",
    "    time.sleep(1)\n",
    "    # create soup object\n",
    "    html = browser.html\n",
    "    soup = bs(html, \"html5lib\")\n",
    "    \n",
    "    # -------------------------\n",
    "    image_section = soup.find(\"section\",\"grid_gallery\").find_all(\"li\",\"slide\")[0]\n",
    "    part_url = \"https://www.jpl.nasa.gov\"\n",
    "    try:\n",
    "        featured_image = image_section.find('img', {'src':re.compile('.jpg')})[\"src\"]\n",
    "        featured_image = part_url+featured_image\n",
    "    except: \n",
    "        print(\"error in scraping featured image\")\n",
    "\n",
    "    #================================== scrape temperature ==================================\n",
    "    browser.visit(weather_url)\n",
    "    time.sleep(1.5)\n",
    "    # create soup object\n",
    "    html = browser.html\n",
    "    soup = bs(html, \"html5lib\")\n",
    "    \n",
    "    # -------------------------\n",
    "    twitters = soup.find_all(\"div\",\"css-1dbjc4n\")\n",
    "    mars_weather = []\n",
    "    for twit in twitters:\n",
    "        try:\n",
    "            if twit.span:\n",
    "                tweet = twit.find(\"span\",\"css-901oao\").text\n",
    "                if tweet[0:11] == \"InSight sol\" and (tweet not in mars_weather) :\n",
    "                    mars_weather.append(tweet)\n",
    "                    break\n",
    "        except:\n",
    "            None\n",
    "    \n",
    "    #================================== scrape fact table =================================\n",
    "    fact_table = pd.read_html(fact_url)[0]\n",
    "    fact_table = fact_table.rename(columns = {0:\"Metric\",1:\"Value\"})\n",
    "    fact_table_html = fact_table.to_html(index = False)\n",
    "\n",
    "    #================================== scrape Mars Hemispheres ==============================\n",
    "    browser.visit(hemisphere_urls)\n",
    "    time.sleep(1)\n",
    "\n",
    "    # scrape soup object\n",
    "    html = browser.html\n",
    "    soup = bs(html, \"html5lib\")\n",
    "    \n",
    "    # -------------------------\n",
    "    titles = soup.find_all(\"div\",\"description\")\n",
    "    \n",
    "    # -------------------------\n",
    "    title_list = []\n",
    "    image_url = []\n",
    "    hemisphere_image_urls =[]\n",
    "    for title in titles:\n",
    "        try:\n",
    "            title_list.append(title.h3.text)\n",
    "\n",
    "            # click the title link\n",
    "            browser.links.find_by_partial_text(title.h3.text).click()\n",
    "\n",
    "            # scrape image url\n",
    "            new_html = browser.html\n",
    "            new_soup = bs(new_html, \"html5lib\")\n",
    "            # try to get image url\n",
    "            try:\n",
    "                img_url = new_soup.find(\"div\",\"downloads\").find(\"li\").a[\"href\"]\n",
    "                image_url.append(img_url)\n",
    "            except:\n",
    "                print(\"----Image error----\")\n",
    "\n",
    "            # go back \n",
    "            browser.back()\n",
    "\n",
    "\n",
    "        except:\n",
    "            print(\"----error----\")\n",
    "            \n",
    "    # -------------------------\n",
    "    for i in range(len(title_list)):\n",
    "        dict_list = {\"title\":title_list[i],\"img_url\":image_url[i]}\n",
    "        hemisphere_image_urls.append(dict_list)\n",
    "\n",
    "    \n",
    "    #============================== store scraped info to a dict ============================\n",
    "        summary_dict = dict(news_title = news_title,\n",
    "                            news_p = news_p,\n",
    "                            featured_image = featured_image,\n",
    "                            mars_weather =mars_weather[0],\n",
    "                            fact_table = fact_table_html,\n",
    "                            hemisphere_image_urls = hemisphere_image_urls)\n",
    "\n",
    "    browser.quit()\n",
    "\n",
    "    return summary_dict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
